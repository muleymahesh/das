// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/Booking.dart';
import 'data/model/Deposition.dart';
import 'data/model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 9179977977354614928),
      name: 'Booking',
      lastPropertyId: const obx_int.IdUid(8, 7349193323454389628),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8357144011607279320),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8458344830971261292),
            name: 'customerName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7962767843937331718),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3822356327941314575),
            name: 'mobileNumber',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 860510758666373946),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8822244724883855249),
            name: 'pincode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3650868813667324470),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7349193323454389628),
            name: 'amount',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8413758253743813104),
      name: 'Deposition',
      lastPropertyId: const obx_int.IdUid(5, 6440728090609097041),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1253836200792288439),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7728761791378670390),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8121406318002561094),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1834175990793675638),
            name: 'raisedBy',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6440728090609097041),
            name: 'assignedTo',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 6362456158158863905),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(5, 3537299845801548331),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5006572974907211500),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 747061695773067018),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7890717786941939849),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8278147917276464597),
            name: 'mobile',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3537299845801548331),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 6362456158158863905),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Booking: obx_int.EntityDefinition<Booking>(
        model: _entities[0],
        toOneRelations: (Booking object) => [],
        toManyRelations: (Booking object) => {},
        getId: (Booking object) => object.id,
        setId: (Booking object, int id) {
          object.id = id;
        },
        objectToFB: (Booking object, fb.Builder fbb) {
          final customerNameOffset = fbb.writeString(object.customerName);
          final emailOffset = fbb.writeString(object.email);
          final mobileNumberOffset = fbb.writeString(object.mobileNumber);
          final addressOffset = fbb.writeString(object.address);
          final pincodeOffset = fbb.writeString(object.pincode);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, customerNameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, mobileNumberOffset);
          fbb.addOffset(4, addressOffset);
          fbb.addOffset(5, pincodeOffset);
          fbb.addOffset(6, typeOffset);
          fbb.addFloat64(7, object.amount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final customerNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mobileNumberParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final pincodeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final object = Booking(
              customerName: customerNameParam,
              email: emailParam,
              mobileNumber: mobileNumberParam,
              address: addressParam,
              pincode: pincodeParam,
              type: typeParam,
              amount: amountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Deposition: obx_int.EntityDefinition<Deposition>(
        model: _entities[1],
        toOneRelations: (Deposition object) => [],
        toManyRelations: (Deposition object) => {},
        getId: (Deposition object) => object.id,
        setId: (Deposition object, int id) {
          object.id = id;
        },
        objectToFB: (Deposition object, fb.Builder fbb) {
          final raisedByOffset = fbb.writeString(object.raisedBy);
          final assignedToOffset = fbb.writeString(object.assignedTo);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(3, raisedByOffset);
          fbb.addOffset(4, assignedToOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final raisedByParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final assignedToParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = Deposition(
              amount: amountParam,
              date: dateParam,
              raisedBy: raisedByParam,
              assignedTo: assignedToParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final usernameOffset = fbb.writeString(object.username);
          final mobileOffset = fbb.writeString(object.mobile);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, mobileOffset);
          fbb.addOffset(4, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final mobileParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = User(
              name: nameParam,
              username: usernameParam,
              mobile: mobileParam,
              type: typeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Booking] entity fields to define ObjectBox queries.
class Booking_ {
  /// See [Booking.id].
  static final id =
      obx.QueryIntegerProperty<Booking>(_entities[0].properties[0]);

  /// See [Booking.customerName].
  static final customerName =
      obx.QueryStringProperty<Booking>(_entities[0].properties[1]);

  /// See [Booking.email].
  static final email =
      obx.QueryStringProperty<Booking>(_entities[0].properties[2]);

  /// See [Booking.mobileNumber].
  static final mobileNumber =
      obx.QueryStringProperty<Booking>(_entities[0].properties[3]);

  /// See [Booking.address].
  static final address =
      obx.QueryStringProperty<Booking>(_entities[0].properties[4]);

  /// See [Booking.pincode].
  static final pincode =
      obx.QueryStringProperty<Booking>(_entities[0].properties[5]);

  /// See [Booking.type].
  static final type =
      obx.QueryStringProperty<Booking>(_entities[0].properties[6]);

  /// See [Booking.amount].
  static final amount =
      obx.QueryDoubleProperty<Booking>(_entities[0].properties[7]);
}

/// [Deposition] entity fields to define ObjectBox queries.
class Deposition_ {
  /// See [Deposition.id].
  static final id =
      obx.QueryIntegerProperty<Deposition>(_entities[1].properties[0]);

  /// See [Deposition.amount].
  static final amount =
      obx.QueryDoubleProperty<Deposition>(_entities[1].properties[1]);

  /// See [Deposition.date].
  static final date =
      obx.QueryDateProperty<Deposition>(_entities[1].properties[2]);

  /// See [Deposition.raisedBy].
  static final raisedBy =
      obx.QueryStringProperty<Deposition>(_entities[1].properties[3]);

  /// See [Deposition.assignedTo].
  static final assignedTo =
      obx.QueryStringProperty<Deposition>(_entities[1].properties[4]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[2].properties[1]);

  /// See [User.username].
  static final username =
      obx.QueryStringProperty<User>(_entities[2].properties[2]);

  /// See [User.mobile].
  static final mobile =
      obx.QueryStringProperty<User>(_entities[2].properties[3]);

  /// See [User.type].
  static final type = obx.QueryStringProperty<User>(_entities[2].properties[4]);
}
